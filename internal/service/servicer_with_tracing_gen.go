// Copyright Â© 2024 Ingka Holding B.V. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package service

// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/opentelemetry.tpl
// gowrap: http://github.com/hexdigest/gowrap

import (
	"context"

	"github.com/ingka-group-digital/iam-proxy/client/health"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
)

// ServicerWithTracing implements Servicer interface with all methods wrapped
// with Trace
type ServicerWithTracing struct { //nolint:golint
	base         Servicer
	instanceName string
}

// NewWithTracing returns an instance of the Servicer decorated with tracing
func NewWithTracing(base Servicer, instanceName string) Servicer {
	return ServicerWithTracing{
		base:         base,
		instanceName: instanceName,
	}
}

// GenerateToken implements Servicer
func (_d ServicerWithTracing) GenerateToken(ctx context.Context, key string, secret string) (s1 string, s2 string, i1 int64, err error) {
	ctx, span := otel.Tracer(_d.instanceName).Start(ctx, "GenerateToken")

	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.base.GenerateToken(ctx, key, secret)
}

// Health implements Servicer
func (_d ServicerWithTracing) Health(ctx context.Context) (h1 health.Health, err error) {

	return _d.base.Health(ctx)
}

// ParseToken implements Servicer
func (_d ServicerWithTracing) ParseToken(tokenString string) (s1 string, err error) {
	_, span := otel.Tracer(_d.instanceName).Start(context.Background(), "ParseToken")

	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()
	}()

	return _d.base.ParseToken(tokenString)
}

// Ready implements Servicer
func (_d ServicerWithTracing) Ready(ctx context.Context) (err error) {

	return _d.base.Ready(ctx)
}
