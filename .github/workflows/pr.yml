name: ðŸ”¬ PR Analysis

on:
  pull_request:

jobs:
  pr-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Triage PR title
        if: ${{ startsWith(github.head_ref, 'dependabot/') != true }}
        uses: aslafy-z/conventional-pr-title-action@v3.2.0
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Check out source code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Setup deps
        shell: bash
        run: |
          # A linter that helps with getting the import ordering right
          go install github.com/hedhyw/go-import-lint/cmd/go-import-lint@latest

          # A state-of-the-art golang linter.
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run .pre-commit-config.yaml
        uses: pre-commit/action@v3.0.0

      - name: Build Docker
        shell: bash
        run: |
          docker build . -t ${{ github.repository }}:${{ github.sha }}

      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4

      - name: Build binary and push to JFrog
        run: |
          BUILD_NAME=${{ github.repository }}

          # Use the same versioning scheme as in the Makefile
          export VERSION=`make version`

          # Configure Artifactory:
          jf c add --url=${{ secrets.JF_URL }} --access-token=${{ secrets.JF_ACCESS_TOKEN }}

          # Configure the project's repositories:
          jf go-config --repo-resolve=${{ secrets.JF_GO_DEV_REPO }} --repo-deploy=${{ secrets.JF_GO_DEV_REPO }}

          # Build the project with go and resolve the project dependencies from Artifactory.
          # The `go build` command is copied from `make compile`
          jf go build -ldflags "-X $(go list -m)/internal/version.Version=${VERSION}" ./... --build-name=$BUILD_NAME --build-number=$VERSION

          # Publish the package to the <GO_DEPLOY_REPO> repository in Artifactory.
          jf go-publish --build-name=$BUILD_NAME --build-number=$VERSION $VERSION
